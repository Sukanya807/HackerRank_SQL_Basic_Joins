--1. Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT SUM(ct.POPULATION)
FROM CITY AS ct
JOIN COUNTRY AS cy
ON ct.COUNTRYCODE = cy.CODE
WHERE cy.CONTINENT = 'Asia';

-------------------------------------------------------------------------------------

--2. Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT ct.NAME
FROM CITY AS ct
JOIN COUNTRY AS cy
ON ct.COUNTRYCODE = cy.CODE
WHERE cy.CONTINENT = 'Africa';

----------------------------------------------------------------------------------------

--3. Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population)
 --rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT cy.CONTINENT, FLOOR(AVG(ct.POPULATION))
FROM CITY AS ct
JOIN COUNTRY AS cy
ON ct.COUNTRYCODE = cy.CODE
GROUP BY cy.CONTINENT;

-------------------------------------------------------------------------------------------

--4. You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
--Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark.
 --Ketty doesn't want the NAMES of those students who received a grade lower than 8. 
--The report must be in descending order by grade -- i.e. higher grades are entered first. 
--If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
--Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. 
--If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

Write a query to help Eve.

SELECT CASE WHEN g.Grade < 8 THEN NULL ELSE s.Name END, 
    g.Grade, 
    s.Marks
FROM Students AS s
JOIN Grades AS g
ON s.Marks BETWEEN g.Min_Mark AND g.Max_Mark
ORDER BY g.Grade DESC, s.Name;

--------------------------------------------------------------------------------------------------

--5. Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard!
 --Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge.
 --Order your output in descending order by the total number of challenges in which the hacker earned a full score. 
--If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

SELECT h.hacker_id, h.name
FROM Hackers AS h
JOIN Submissions AS s
ON h.hacker_id = s.hacker_id
JOIN Challenges AS c
ON c.challenge_id = s.challenge_id
JOIN Difficulty AS d
ON d.difficulty_level = c.difficulty_level
WHERE s.score = d.score
GROUP BY h.hacker_id, h.name
HAVING COUNT(*) > 1
ORDER BY COUNT(*) DESC, h.hacker_id;

---------------------------------------------------------------------------------------------------------

--6. Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.

--Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. 
--Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. 
--If more than one wand has same power, sort the result in order of descending age.

--SOLUTION 1:

WITH min_coins AS (SELECT id,
       code,
       coins_needed,
       power,
       ROW_NUMBER() OVER (PARTITION BY code, power ORDER BY code, power, coins_needed) AS row_num
FROM Wands)

SELECT mc.id,
       wp.age,
       mc.coins_needed,
       mc.power
FROM Wands_Property AS wp
JOIN min_coins AS mc
ON mc.code = wp.code AND row_num = 1
WHERE is_evil=0
ORDER BY mc.power DESC, wp.age DESC;

--SOLUTION 2:

SELECT wand.id, wpro.age, wand.coins_needed, wand.power
FROM Wands AS wand
JOIN Wands_Property AS wpro
ON wand.code = wpro.code
JOIN
(SELECT w.power AS PWR,
        wp.age AS AGE,
        MIN(w.coins_needed) AS min_coins
FROM Wands AS w
JOIN Wands_Property AS wp
ON w.code = wp.code
WHERE wp.is_evil = 0
GROUP BY w.power, wp.age) AS sub
ON wpro.age = sub.AGE AND wand.power = sub.PWR AND wand.coins_needed = sub.min_coins
ORDER BY wand.power DESC, wpro.age DESC;

-------------------------------------------------------------------------------------------------------------------------------------

--7. Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. 
--Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. 
--If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.

WITH table_num_challenges AS (SELECT h.hacker_id,
       h.name,
       COUNT(c.challenge_id) AS num_challenges
FROM Hackers AS h
JOIN Challenges AS c
ON h.hacker_id = c.hacker_id
GROUP BY h.hacker_id, h.name)

, table_count_challenges AS (SELECT num_challenges,
       COUNT(num_challenges) AS count_num_challenges
FROM table_num_challenges
GROUP BY num_challenges)

SELECT tnc.hacker_id,
       tnc.name,
       tnc.num_challenges
FROM table_num_challenges AS tnc
JOIN table_count_challenges AS ttc
ON tnc.num_challenges = ttc.num_challenges
WHERE count_num_challenges <= 1
OR 
tnc.num_challenges = (SELECT MAX(num_challenges) FROM table_num_challenges)
ORDER BY tnc.num_challenges DESC, tnc.hacker_id;

---------------------------------------------------------------------------------------------------------------------------------

--8. You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!

--The total score of a hacker is the sum of their maximum scores for all of the challenges. 
--Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. 
--If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of  from your result.

SELECT tms.hacker_id, 
       tms.name, 
       SUM(tms.max_score) AS total_score
FROM
(SELECT h.hacker_id,
       h.name,
       s.challenge_id,
       MAX(s.score) AS max_score
FROM Hackers AS h
JOIN Submissions AS s
ON h.hacker_id = s.hacker_id
GROUP BY h.hacker_id, h.name, s.challenge_id) AS tms
GROUP BY tms.hacker_id, tms.name
HAVING total_score > 0
ORDER BY total_score DESC, hacker_id;